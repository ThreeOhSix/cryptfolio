<h1>{{title}}</h1>
<style>
    .Values-Container{
        position: absolute;
        top: 0px;
        bottom: 0px;
        left: 0px;
        width: 50%;
    }

    .Weights-Container{
        position: absolute;
        top: 0px;
        bottom: 0px;
        right: 0px;
        width: 50%;
    }
</style>
<div id="values_container" class="Values-Container"></div>
<div id="weights_container" class="Weights-Container"></div>
<script>

    var parse_time = function(formatted_string){
        return (new Date(formatted_string)).getTime();
    }

    var setup_values = function(v_data){
        Highcharts.chart('values_container', {
            title: {
                text: 'Portfolio historical comparison.'
            },
            xAxis: {
                type: 'datetime'
            },
            yAxis: {
                title: {
                    text: 'Notional value.'
                }
            },
            series: v_data
        });
    }

    var setup_weights = function(w_data){
        Highcharts.stockChart('weights_container', {
            chart: {
                type: 'area'
            },
            title: {
                text: 'Portfolio Weights'
            },
            xAxis: {
                type: 'datetime'
            },
            yAxis: {
                title: {
                    text: 'Percent'
                }
            },
            plotOptions: {
                area: {
                    stacking: 'normal',
                    lineColor: '#666666',
                    lineWidth: 1,
                    marker: {
                        lineWidth: 1,
                        lineColor: '#666666'
                    }
                }
            },
            series: w_data
        });
    }

    $.get('data/simulations.json', function(data){
        var value_data = data.map(function (d) {
            return {
                name: 'MC_' + d.size,
                data: d.simulation.map(function (s) {
                    return [parse_time(s.date_string), s.value];
                })
            };
        });

        var bar_sim = 2;
        var agg = {};
        data[bar_sim].simulation.forEach(function(sim){
            sim.portfolio.weights.forEach(function(weight){
                if(!agg[weight.symbol]){
                    agg[weight.symbol] = {
                        name: weight.symbol,
                        data: []
                    };
                }
                agg[weight.symbol].data.push([parse_time(sim.date_string), weight.market_cap_weight]);
            });
        });
        var bar_keys = Object.keys(agg);
        var bar_data = [];
        bar_keys.forEach(function(key){
            var val = agg[key];
            bar_data.push(val);
        });

        setup_values(value_data);
        setup_weights(bar_data);
    });
    
</script>